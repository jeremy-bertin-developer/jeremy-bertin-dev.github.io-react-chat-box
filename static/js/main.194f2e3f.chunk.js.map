{"version":3,"sources":["images/bart.png","images/homer.png","Components/Message/Message.js","Components/DisplayMsg/DisplayMsg.js","Components/Input/Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Message","src","classNameImg","classNameCardBody","classNameCardTitle","name","message","className","alt","DisplayMsg","children","blockMessage","Input","props","handleOnChangeName","e","setState","target","value","handleOnChangeMessage","isWriting","state","handleMessage","handleClick","handleOnClickAndScroll","this","onChange","type","placeholder","aria-label","aria-describedby","onClick","React","Component","App","handleOnScroll","smooth","Scroll","scrollToBottom","handleOnClick","isCliked","bart","homer","allMessages","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.194f2e3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bart.6e455389.png\";","module.exports = __webpack_public_path__ + \"static/media/homer.def41b08.png\";","import React from \"react\";\n\nconst Message = ({\n  src,\n  classNameImg,\n  classNameCardBody,\n  classNameCardTitle,\n  name,\n  message\n}) => {\n  return (\n    <div className=\"card my-2 border-0 shadow\">\n      <img src={src} className={classNameImg} alt=\"...\" />\n      <div className={classNameCardBody}>\n        <h5 className={classNameCardTitle}>{name}</h5>\n        <p className=\"card-text\">{message}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","import React from \"react\";\n\nconst DisplayMsg = ({ children, blockMessage }) => {\n    return (\n        <header className=\"container header-wrapper col-8 mx-auto\">\n          <div className=\"row\">\n            <h2 className=\"text-left p-3 bg-warning w-100\">TchatBox</h2>\n            <div className=\"col-12\">{blockMessage}</div>\n            <div className=\"col-12\">\n                {children}\n            </div>\n          </div>\n        </header>\n    )\n}\n\nexport default DisplayMsg;","import React from \"react\";\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      message: \"\",\n    //   isWriting: false\n    };\n  }\n\n  handleOnChangeName = e => {\n    this.setState({\n      name: e.target.value\n    });\n  };\n\n  handleOnChangeMessage = e => {\n    this.setState({\n      message: e.target.value,\n      isWriting: true\n    });\n    let name = this.state.name\n    let isWriting = this.state.isWriting;\n    this.props.handleMessage(isWriting, name)\n  };\n\n  handleClick = () => {\n    let name = this.state.name;\n    let message = this.state.message;\n    this.props.handleOnClickAndScroll(name, message);\n    this.setState({\n      name: \"\",\n      message: \"\",\n    //   isWriting: false\n    });\n  };\n\n  render() {\n    return (\n      <main className=\"container col-8 mx-auto fixed-bottom\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"input-group flex-nowrap my-3 border-0\">\n              <input\n                value={this.state.name}\n                onChange={this.handleOnChangeName}\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Name\"\n                aria-label=\"Name\"\n                aria-describedby=\"addon-wrapping\"\n              ></input>\n              <input\n                value={this.state.message}\n                onChange={this.handleOnChangeMessage}\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Message\"\n                aria-label=\"Message\"\n                aria-describedby=\"addon-wrapping\"\n              ></input>\n              <div className=\"input-group-prepend\">\n                <button\n                  onClick={this.handleClick}\n                  type=\"button\"\n                  className=\"btn btn-success\"\n                >\n                  Send\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Input;\n","import React from \"react\";\nimport Message from \"./Components/Message/Message\";\nimport DisplayMsg from \"./Components/DisplayMsg/DisplayMsg\";\nimport Input from \"./Components/Input/Input\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as Scroll from \"react-scroll\";\nimport FadeIn from \"react-fade-in\";\nimport bart from \"./images/bart.png\";\nimport homer from \"./images/homer.png\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blockMessage: \"\",\n      isCliked: false,\n      isWriting: false,\n      name: \"\"\n    };\n    this.allMessages = [];\n  }\n\n  handleOnScroll = smooth => {\n    let scroll = Scroll.animateScroll;\n    scroll.scrollToBottom(smooth);\n  };\n\n  handleOnClick = (name, message) => {\n    const blockMessage = (\n      <>\n        <FadeIn>\n          <Message\n            src={!this.state.isCliked ? homer : bart}\n            classNameImg={!this.state.isCliked ? \"left m-1\" : \"right m-1\"}\n            classNameCardBody={\n              this.state.isCliked\n                ? \"card-body text-right\"\n                : \"card-body text-left\"\n            }\n            classNameCardTitle={\n              this.state.isCliked\n                ? \"card-title text-warning\"\n                : \"card-title text-success\"\n            }\n            name={name}\n            message={message}\n          />\n        </FadeIn>\n      </>\n    );\n    this.allMessages.push(blockMessage);\n\n    this.setState({\n      blockMessage: this.allMessages,\n      isCliked: !this.state.isCliked,\n      isWriting: false\n    });\n  };\n\n  handleMessage = (isWriting, name) => {\n    this.setState({\n      isWriting: isWriting,\n      name: name\n    });\n  };\n\n  handleOnClickAndScroll = (name, message) => {\n    this.handleOnClick(name, message);\n    this.handleOnScroll();\n  };\n\n  render() {\n    return (\n      <>\n        <DisplayMsg blockMessage={this.state.blockMessage}>\n          {this.state.isWriting && (\n            <FadeIn>\n              <div className=\"card my-2 border-0 shadow pending\">\n                <div className=\"card-body text-left\">\n                  <p className=\"card-text\">\n                    <em>{this.state.name} is typing ... </em>\n                  </p>\n                </div>\n              </div>\n            </FadeIn>\n          )}\n        </DisplayMsg>\n        <Input\n          handleOnClickAndScroll={this.handleOnClickAndScroll}\n          handleMessage={this.handleMessage}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}